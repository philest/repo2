#include "/c/cs323/Hwk6/process.h"

#include "stack.h"

// Print error message and die with STATUS
#define errorExit(status,level)  perror(level), exit(status)

// Execute command list CMDLIST and return status of last command executed
int cdCMD(int argc, char *dirname);
int pushdCMD(int argc, char *argv[]);
int popdCMD(int argc);
int executeBuiltCMD(CMD *cmd);
int executeRedIn(CMD *cmd);
int executeRedOut(CMD *cmd);
int executeSimple(CMD *cmd,jmp_buf env);
int executeStage(CMD *cmd,jmp_buf env);
int executePipeline(CMD *cmd,jmp_buf env);
int executeAndOr(CMD *cmd,jmp_buf env);
int executeCommand(CMD *cmd,jmp_buf env);

#define STD_IN (0)
#define STD_OUT (1)
#define STD_ERR (2)

#define PIPE_RD (0)
#define PIPE_WR (1)

#define ERROR (1)

//stores directory names for pushd and popd
Stack dirStk = NULL;

jmp_buf env;

/* execute the cd inbuilt command */
int cdCMD(int argc, char *dirname)
{
	if(argc == 1)
	{
		if(chdir(getenv("HOME")) != 0)
		{
			perror("chdir");
			return errno;
		}
		return EXIT_SUCCESS;
	}
	else if(argc == 2)
	{
		if(chdir(dirname) != 0)
		{
			perror("chdir");
			return errno;
		}
		return EXIT_SUCCESS;
	}
	fprintf(stderr,"%s\n","Invalid usage of cd");
	return ERROR;
}

/* execute the pushd inbuilt command */
int pushdCMD(int argc, char *argv[])
{
	if(argc == 2)
	{
		char *cwd;
		if((cwd = getcwd(0,0)) == NULL)
		{
			perror("getcwd");
			return errno;
		}
		dirStk = pushStack(dirStk,cwd);
		free(cwd);
		return cdCMD(2,argv[1]);
	}
	fprintf(stderr,"%s\n","Invalid usage of pushd");
	return ERROR;
}

/* execute the popd inbuilt command */
int popdCMD(int argc)
{
	if(argc == 1 && dirStk)
	{
		char *path = malloc((strlen(dirStk->dirname)+1)*sizeof(char));
		strcpy(path,dirStk->dirname);
		dirStk = popStack(dirStk);
		int toReturn = cdCMD(2,path);
		free(path);
		return toReturn;
	}
	fprintf(stderr,"%s\n","Invalid usage of popd");
	return ERROR;
}

/* execute an inbuilt command */
int executeBuiltCMD(CMD *cmd)
{
	int fd[3], val;
	fd[0] = dup(STD_IN);
	fd[1] = dup(STD_OUT);
	fd[2] = dup(STD_ERR);
	if(cmd->toType != NONE)
	{
		int err = executeRedOut(cmd);
		if(err != EXIT_SUCCESS)
		{
			return err;
		}
	}
	if((strcmp(cmd->argv[0],"cd")) == 0)
	{	
		val = cdCMD(cmd->argc,cmd->argv[1]);
	}
	else if((strcmp(cmd->argv[0],"pushd")) == 0)
	{
		val = pushdCMD(cmd->argc,cmd->argv);
	}
	else if((strcmp(cmd->argv[0],"popd")) == 0)
	{
		val = popdCMD(cmd->argc);
	}
	dup2(fd[0],STD_IN);
	dup2(fd[1],STD_OUT);
	dup2(fd[2],STD_ERR);
	return val;
}

/* setup file descriptors and files for redirection in */
int executeRedIn(CMD *cmd)
{
	if(cmd->fromType == RED_IN)
	{
		//redirect in
		int file;
		if((file = open(cmd->fromFile,O_RDONLY)) < 0)
		{
			return errno;
		}
		dup2(file,STD_IN);
		close(file);
	}
	else if(cmd->fromType == RED_HERE)
	{
		//redirect from HERE document
		char buffer[] = "XXXXXX";
		int fd;
		if((fd = mkstemp(buffer)) < 0)
		{
			perror("mkstemp");
			return errno;
		}
		//write HERE doc contents to temp file
		if(write(fd,cmd->fromFile,strlen(cmd->fromFile)) < 0)
		{
			perror("write");
			return errno;
		}
		close(fd);
		if((fd = open(buffer,O_RDONLY)) < 0)
		{
			perror("open");
			return errno;
		}
		dup2(fd,STD_IN);
		close(fd);
		unlink(buffer);
	}
	return EXIT_SUCCESS;
}

/* setup file descriptors and files for redirection out */
int executeRedOut(CMD *cmd)
{
	int mode = 0;
	char *noclobber = getenv("noclobber");
	switch(cmd->toType)
	{
		case RED_OUT: case RED_ERR: 		
		mode |= noclobber ? (O_EXCL | O_CREAT | O_WRONLY) : 
				(O_CREAT | O_WRONLY | O_TRUNC); break;
		case RED_OUT_C: case RED_ERR_C:		
		mode |= (O_CREAT | O_WRONLY | O_TRUNC); break;
      	case RED_OUT_APP: case RED_ERR_APP:
      	mode |= noclobber ? (O_APPEND | O_WRONLY) : 
      			(O_CREAT | O_APPEND | O_WRONLY); break;
      	case RED_OUT_APP_C: case RED_ERR_APP_C:
      	mode |= (O_CREAT | O_APPEND | O_WRONLY); break;
	}
	int file;
	if((file = open(cmd->toFile,mode, 0666)) < 0)
	{
		return errno;
	}
	dup2(file,STD_OUT);
	if(ISERROR(cmd->toType))
	{
		dup2(file,STD_ERR);
	}
	close(file);
	return EXIT_SUCCESS;
}

/* execute a simple command */
int executeSimple(CMD *cmd,jmp_buf env)
{
	int pid;
	int status = EXIT_SUCCESS;
	if(cmd)
	{
		if((strcmp(cmd->argv[0],"cd")) == 0 || 
			(strcmp(cmd->argv[0],"pushd")) == 0 ||
			(strcmp(cmd->argv[0],"popd")) == 0)
		{
			int returnStatus = executeBuiltCMD(cmd);
			if(returnStatus != EXIT_SUCCESS)
			{
				longjmp(env,returnStatus);
			}
			return returnStatus;
		}
		else
		{
			if ((pid = fork()) < 0)
			{
				perror("Fork");
				return errno;
			}
			else if(pid == 0)
			{
				//execute simple command in child process
				if(cmd->fromType != NONE)
				{
					int err = executeRedIn(cmd);
					if(err != EXIT_SUCCESS)
					{
						errorExit(err,"Red_In");
					}
				}
				if(cmd->toType != NONE)
				{
					int err = executeRedOut(cmd);
					if(err != EXIT_SUCCESS)
					{
						errorExit(err,"Red_out");
					}
				}
				execvp(cmd->argv[0],cmd->argv);
				errorExit(errno,"Simple");
			}
			//ignore SIGINT while waiting
			signal(SIGINT,SIG_IGN);
			//parent process waits for the child process to complete
			waitpid(pid,&status,0);
			//restore SIGINTS to default
			signal(SIGINT,SIG_DFL);
			status = (WIFEXITED(status) ? WEXITSTATUS(status) : 
					128+WTERMSIG(status));
		}
	}
	return status;
}

/* execute stage according to grammar */
int executeStage(CMD *cmd,jmp_buf env)
{
	int status = EXIT_SUCCESS;
	if(cmd)
	{
		if(cmd->type == SUBCMD)
		{
			int pid;
			if ((pid = fork()) < 0)
			{
				perror("Fork");
				return errno;
			}
			else if(pid == 0)
			{
				if(cmd->fromType != NONE)
				{
					int err = executeRedIn(cmd);
					if(err != EXIT_SUCCESS)
					{
						return err;
					}
				}
				if(cmd->toType != NONE)
				{
					int err = executeRedOut(cmd);
					if(err != EXIT_SUCCESS)
					{
						return err;
					}
				}
				status = executeCommand(cmd->left,env);
				_exit(status);
			}
			//ignore SIGINT while waiting
			signal(SIGINT,SIG_IGN);
			//parent process waits for the child process to complete
			waitpid(pid,&status,0);
			//restore SIGINTS to default
			signal(SIGINT,SIG_DFL);
			status = (WIFEXITED(status) ? WEXITSTATUS(status) : 
						128+WTERMSIG(status));
		}
		else
		{
			status = executeSimple(cmd,env);
		}
	}
	return status;
}

/* execute pipeline according to the grammar */
int executePipeline(CMD *cmd,jmp_buf env)
{
	int status = EXIT_SUCCESS;
	int status2 = EXIT_SUCCESS;
	if(cmd)
	{
		if(cmd->type == PIPE || cmd->type == PIPE_ERR)
		{
			int fd[2], pid;
			if(pipe(fd) < 0)
			{
				perror("Pipe");
				return errno;
			}
			else if((pid = fork()) == 0)	//child process
			{
				close(fd[PIPE_RD]);			//no reading from pipe
				dup2(fd[PIPE_WR],STD_OUT);	//stdout = write end of pipe
				if(cmd->type == PIPE_ERR)
				{
					dup2(fd[PIPE_WR],STD_ERR);
				}
				close(fd[PIPE_WR]);

				status = executeStage(cmd->left,env);
				_exit(status);
			}
			else if(pid < 0)
			{
				perror("Fork");
				return errno;
			}
			//keep a copy of the original stdin for later restoration
			int stdin = dup(STD_IN);
			close(fd[PIPE_WR]);			//no writing to pipe
			dup2(fd[PIPE_RD],STD_IN);	//stdin = read end of pipe
			close(fd[PIPE_RD]);

			status2 = executePipeline(cmd->right,env);

			//restore stdin
			dup2(stdin,STD_IN);
			close(stdin);

			//ignore SIGINT while waiting
			signal(SIGINT,SIG_IGN);
			waitpid(pid,&status,0);
			//restore SIGINTS to default
			signal(SIGINT,SIG_DFL);

			status = (WIFEXITED(status) ? WEXITSTATUS(status) : 
					128+WTERMSIG(status));
			status = status ? status : status2;
		}
		else
		{
			status = executeStage(cmd,env);
		}
	}
	return status;
}

/* execute andOr according to grammar */
int executeAndOr(CMD *cmd,jmp_buf env)
{
	int status = EXIT_SUCCESS;
	if(cmd)
	{
		//error checking for cmd->left/right..shouldn't be null
		if(cmd->type == SEP_AND)
		{
			status = executePipeline(cmd->left,env);
			if(status == EXIT_SUCCESS)
			{
				status = executeAndOr(cmd->right,env);
			}
			return status;
		}
		else if(cmd->type == SEP_OR)
		{
			status = executePipeline(cmd->left,env);
			if(status != EXIT_SUCCESS)
			{
				status = executeAndOr(cmd->right,env);
			}
			return status;
		}
		else
		{
			status = executePipeline(cmd,env);
		}
	}
	return status;
}

/* execute command according to grammar */
int executeCommand(CMD *cmd,jmp_buf env)
{
	int status = EXIT_SUCCESS;
	if(cmd)
	{
		int stdin = dup(STD_IN);
		int jmpStatus = setjmp(env);
		if(jmpStatus != EXIT_SUCCESS)
		{
			dup2(stdin,STD_IN);
			close(stdin);
			return jmpStatus;
		}
		else
		{
			//error checking for cmd->left..shouldn't be null
			if(cmd->type == SEP_END)
			{
				status = executeAndOr(cmd->left,env);
				status = executeCommand(cmd->right,env);
			}
			else if(cmd->type == SEP_BG)
			{
				int pid;
				if ((pid = fork()) < 0)
				{
					perror("Fork");
					return errno;
				}
				//child runs left cmd tree in background
				else if(pid == 0)
				{
					status = executeAndOr(cmd->left,env);
					_exit(status);
				}
				//parent runs right cmd tree in foreground
				status = executeCommand(cmd->right,env);
			}
			else
			{
				status = executeAndOr(cmd,env);
			}
		}
	}
	return status;
}

/* method that calls the function for executing a cmd tree */
int process(CMD *cmdList)
{
	jmp_buf env;
	int status = executeCommand(cmdList,env);
	char *value = malloc(10*sizeof(char));
	sprintf(value,"%d",status);
	setenv("?",value,1);
	//reap all zombies
	int stat;
	while(waitpid(-1, &stat, WNOHANG) > 0);
	return status;
}